#!/usr/bin/env python3
import os
import re
import sys

def create_search_with_summary():
    """
    Cr√©e ou met √† jour le module 'search_with_summary.py' dans modules/commands.
    Ce module impl√©mente la recherche Google Custom Search et le r√©sum√© du snippet.
    """
    commands_dir = os.path.join("modules", "commands")
    if not os.path.exists(commands_dir):
        os.makedirs(commands_dir)
    target_path = os.path.join(commands_dir, "search_with_summary.py")
    
    code = '''\
import requests
from transformers import pipeline

API_KEY = "AIzaSyCSUqIYxuzAPcY4ZMJsUxfPcFvCKotNRMg"
CX = "212888795d83345dc"

def google_search(query):
    """Effectue une recherche sur Google Custom Search et renvoie le r√©sultat JSON."""
    url = "https://www.googleapis.com/customsearch/v1"
    params = {"key": API_KEY, "cx": CX, "q": query}
    response = requests.get(url, params=params)
    response.raise_for_status()
    return response.json()

def clean_text(text):
    """Nettoie le texte en supprimant les retours √† la ligne et espaces superflus."""
    return " ".join(text.split())

_summarizer = None
def get_summarizer():
    global _summarizer
    if _summarizer is None:
        _summarizer = pipeline("summarization", model="facebook/bart-large-cnn")
    return _summarizer

def summarize_text(text, max_length=50, min_length=10):
    """
    G√©n√®re un r√©sum√© du texte donn√©.
    Les param√®tres max_length et min_length permettent d'ajuster la longueur du r√©sum√©.
    """
    text = clean_text(text)
    summarizer = get_summarizer()
    summary_output = summarizer(text, max_length=max_length, min_length=min_length, do_sample=False)
    return summary_output[0]['summary_text']

def open_google_search_with_summary(query):
    """
    Effectue une recherche Google via l'API Custom Search,
    r√©cup√®re le snippet du premier r√©sultat et renvoie
    une cha√Æne contenant le snippet original et son r√©sum√©.
    """
    try:
        results = google_search(query)
        if "items" in results and results["items"]:
            first_item = results["items"][0]
            snippet = first_item.get("snippet", "")
            if snippet:
                summary = summarize_text(snippet)
                return f"üîç R√©sultat pour '{query}':\\nSnippet original:\\n{snippet}\\nR√©sum√©:\\n{summary}"
            else:
                return f"üîç Aucun snippet trouv√© pour '{query}'."
        else:
            return f"üîç Aucun r√©sultat trouv√© pour '{query}'."
    except Exception as e:
        return f"Erreur lors de la recherche ou du r√©sum√© : {e}"
'''
    with open(target_path, "w", encoding="utf-8") as f:
        f.write(code)
    print("Module 'modules/commands/search_with_summary.py' cr√©√©/mis √† jour.")

def update_dispatcher():
    """
    Ajoute un bloc dans modules/dispatcher.py pour intercepter les commandes
    commen√ßant par "am√©lie " et appeler la fonction open_google_search_with_summary.
    Le bloc est ins√©r√© juste apr√®s la ligne d√©finissant lower_question.
    """
    dispatcher_path = os.path.join("modules", "dispatcher.py")
    if not os.path.exists(dispatcher_path):
        print(f"Fichier {dispatcher_path} introuvable.")
        sys.exit(1)
    
    with open(dispatcher_path, "r", encoding="utf-8") as f:
        content = f.read()
    
    # Si le bloc est d√©j√† pr√©sent, on arr√™te.
    if 'if lower_question.startswith("am√©lie ")' in content:
        print("Le bloc 'Am√©lie' est d√©j√† pr√©sent dans dispatcher.py.")
        return
    
    # On ins√®re le bloc juste apr√®s la d√©finition de lower_question.
    pattern = re.compile(r"(lower_question\s*=\s*question\.lower\(\)\.strip\(\))")
    new_block = r"""\1
    # --- Commande sp√©ciale "Am√©lie" pour recherche avec r√©sum√©
    if lower_question.startswith("am√©lie "):
        query = lower_question[len("am√©lie "):].strip()
        from modules.commands.search_with_summary import open_google_search_with_summary
        return open_google_search_with_summary(query)"""
    new_content, count = pattern.subn(new_block, content, count=1)
    if count == 0:
        print("Impossible de trouver la d√©finition de lower_question dans dispatcher.py.")
        sys.exit(1)
    
    # Sauvegarder une copie de secours
    backup_path = dispatcher_path + ".bak_am√©lie"
    with open(backup_path, "w", encoding="utf-8") as f:
        f.write(content)
    
    with open(dispatcher_path, "w", encoding="utf-8") as f:
        f.write(new_content)
    print("Fichier 'modules/dispatcher.py' mis √† jour avec la commande 'Am√©lie'.")

def main():
    create_search_with_summary()
    update_dispatcher()

if __name__ == "__main__":
    main()
