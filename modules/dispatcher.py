from modules.commands.lights import control_lights as lights_control
import modules.commands.search as search_cmd
import modules.commands.system as system_cmd
from modules.hue import ROOMS

def dispatch(question):
    lower_question = question.lower().strip()
    # --- Commande sp√©ciale "Am√©lie" pour recherche avec r√©sum√©
    if lower_question.startswith("am√©lie "):
        query = lower_question[len("am√©lie "):].strip()
        from modules.commands.search_with_summary import open_google_search_with_summary
        return open_google_search_with_summary(query)
    # --- Commande sp√©ciale "arthena" pour activer la recherche Google avec r√©sum√©
    if lower_question.startswith("arthena "):
        query = lower_question[len("arthena "):].strip()
        from modules.commands.search import open_google_search_with_summary
        return open_google_search_with_summary(query)


    # --- Recherche YouTube (prioritaire)
    youtube_keywords = [
        "cherche sur youtube", "recherche youtube", "montre-moi sur youtube"
    ]
    if any(kw in lower_question for kw in youtube_keywords):
        query = search_cmd.clean_search_query(lower_question, youtube_keywords)
        return search_cmd.open_youtube_search(query)

    # --- Recherche Google par d√©faut : commande qui commence par "cherche "
    if lower_question.startswith("cherche "):
        query = search_cmd.clean_search_query(lower_question, ["cherche"])
        return search_cmd.open_google_search(query)

    # --- Commandes syst√®me (heure, m√©t√©o, etc.)
    if "heure" in lower_question:
        return system_cmd.get_time()
    if "m√©t√©o" in lower_question or "temps" in lower_question:
        return system_cmd.get_weather()
    # Optionnel : liste des pi√®ces si la commande contient "pi√®ces" ou "liste"
    room_list_keywords = [
        "quelles sont les pi√®ces", "liste des pi√®ces", "quels sont les pi√®ces",
        "montre-moi les pi√®ces", "donne-moi la liste des pi√®ces", "pi√®ces disponibles",
        "montre les pi√®ces", "affiche les pi√®ces", "dis-moi les pi√®ces"
    ]
    if any(kw in lower_question for kw in room_list_keywords):
        return system_cmd.list_rooms()
    if any(cmd in lower_question for cmd in ["arr√™te-toi", "stop", "termine la conversation", "cesse d'√©couter"]):
        return system_cmd.stop_conversation()

    # --- Commandes pour les lumi√®res
    # Allumer
    if "lumi√®re" in lower_question and any(word in lower_question for word in ["allume", "allumer", "active", "d√©marre"]):
        room = next((r for r in ROOMS if r in lower_question), None)
        if room:
            result = lights_control("on", room)
            if result == "already":
                return f"üí° Les lumi√®res de la pi√®ce {room} sont d√©j√† allum√©es."
            elif result:
                return f"üí° La lumi√®re de la pi√®ce {room} a √©t√© allum√©e."
            else:
                return "‚ùå Une erreur est survenue lors de l'allumage de la lumi√®re."
        else:
            # Si aucune pi√®ce n'est sp√©cifi√©e, appliquer l'action √† toutes les lumi√®res
            results = {r: lights_control("on", r) for r in ROOMS.keys()}
            if all(v == "already" for v in results.values()):
                return "üí° Toutes les lumi√®res sont d√©j√† allum√©es."
            elif all(v in [True, "already"] for v in results.values()):
                return "üí° Toutes les lumi√®res ont √©t√© allum√©es."
            else:
                return "‚ùå Une erreur est survenue lors de l'allumage de toutes les lumi√®res."

    # √âteindre
    if "lumi√®re" in lower_question and any(word in lower_question for word in ["√©teins", "√©teindre", "coupe", "d√©sactive"]):
        room = next((r for r in ROOMS if r in lower_question), None)
        if room:
            result = lights_control("off", room)
            if result == "already":
                return f"üí° Les lumi√®res de la pi√®ce {room} sont d√©j√† √©teintes."
            elif result:
                return f"üí° La lumi√®re de la pi√®ce {room} a √©t√© √©teinte."
            else:
                return "‚ùå Une erreur est survenue lors de l'extinction de la lumi√®re."
        else:
            # Si aucune pi√®ce n'est sp√©cifi√©e, appliquer l'action √† toutes les lumi√®res
            results = [lights_control("off", r) for r in ROOMS.keys()]
            if all(results):
                return "üí° Toutes les lumi√®res ont √©t√© √©teintes."
            else:
                return "‚ùå Une erreur est survenue lors de l'extinction de toutes les lumi√®res."

    # --- Aucune commande reconnue : ne rien renvoyer
    return ""
